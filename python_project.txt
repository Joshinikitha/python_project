from datetime import datetime, timedelta

class Vehicle:
    def init(self, vehicle_number):
        self.vehicle_number = vehicle_number
        self.entry_time = None
        self.exit_time = None
        self.fee = 0.0
        self.is_paid = False

class ParkingLot:
    def init(self, total_spots, rate_per_hour):
        self.total_spots = total_spots
        self.available_spots = total_spots
        self.parked_vehicles = {}
        self.rate_per_hour = rate_per_hour
        self.waiting_vehicles = {}

    def complete_payment(self, vehicle_number):
        if vehicle_number in self.waiting_vehicles:
            vehicle = self.waiting_vehicles[vehicle_number]
            vehicle.is_paid = True
            print(f"Payment completed for vehicle {vehicle_number}. You can now park the vehicle.")
        else:
            print(f"Vehicle {vehicle_number} is not waiting for payment.")

    def park_vehicle(self, vehicle_number):
        if vehicle_number in self.waiting_vehicles and self.waiting_vehicles[vehicle_number].is_paid:
            if self.available_spots > 0:
                vehicle = self.waiting_vehicles.pop(vehicle_number)
                vehicle.entry_time = datetime.now()
                self.parked_vehicles[vehicle_number] = vehicle
                self.available_spots -= 1
                print(f"Vehicle {vehicle_number} parked successfully. Available spots: {self.available_spots}")
            else:
                print("No available spots for parking.")
        else:
            print(f"Vehicle {vehicle_number} has not completed payment or is not in the system.")def remove_vehicle(self, vehicle_number):
            for vehicle_number, vehicle in self.parked_vehicles.items():
                print(f"Vehicle Number: {vehicle_number}, Entry Time: {vehicle.entry_time}")
        else:
            print("No vehicles parked.")

    def add_vehicle_to_waiting_list(self, vehicle_number):
        if vehicle_number not in self.waiting_vehicles and vehicle_number not in self.parked_vehicles:
            vehicle = Vehicle(vehicle_number)
            self.waiting_vehicles[vehicle_number] = vehicle
            print(f"Vehicle {vehicle_number} added to waiting list for payment.")
        else:
            print(f"Vehicle {vehicle_number} is already in the system.")


def main():
    total_spots = int(input("Enter the total number of parking spots: "))
    rate_per_hour = float(input("Enter the parking rate per hour: "))
    parking_lot = ParkingLot(total_spots, rate_per_hour)while True:
        print("\nVehicle Parking Management System")
        print("1. Add Vehicle to Waiting List for Payment")
        print("2. Complete Payment")
        print("3. Park Vehicle")
        print("4. Remove Vehicle")
        print("5. Check Available Spots")
        print("6. Display Parked Vehicles")
        print("7. Exit")

        choice = int(input("Enter your choice: "))

        if choice == 1:
            vehicle_number = input("Enter vehicle number to add to waiting list: ")
            parking_lot.add_vehicle_to_waiting_list(vehicle_number)
        elif choice == 2:
            vehicle_number = input("Enter vehicle number to complete payment: ")
            parking_lot.complete_payment(vehicle_number)
        elif choice == 3:
            vehicle_number = input("Enter vehicle number to park: ")
            parking_lot.park_vehicle(vehicle_number)
        elif choice == 4:
            vehicle_number = input("Enter vehicle number to remove: ")
            parking_lot.remove_vehicle(vehicle_number)
        elif choice == 5:
            parking_lot.check_available_spots()
        elif choice == 6:
            parking_lot.display_parked_vehicles()
        elif choice == 7:
            print("Exiting the system.")
            break
        else:
            print("Invalid choice. Please try again.")

if name == "main":
    main()